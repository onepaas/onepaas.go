// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the project client
type API interface {
	/*
	   CreateProject Create a new Project*/
	CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error)
	/*
	   ListProject List of projects*/
	ListProject(ctx context.Context, params *ListProjectParams) (*ListProjectOK, error)
	/*
	   ReadProject Read the specified project*/
	ReadProject(ctx context.Context, params *ReadProjectParams) (*ReadProjectOK, error)
	/*
	   ReplaceProject Replace the specified project*/
	ReplaceProject(ctx context.Context, params *ReplaceProjectParams) (*ReplaceProjectOK, error)
}

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateProject Create a new Project
*/
func (a *Client) CreateProject(ctx context.Context, params *CreateProjectParams) (*CreateProjectCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProjectCreated), nil

}

/*
ListProject List of projects
*/
func (a *Client) ListProject(ctx context.Context, params *ListProjectParams) (*ListProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProject",
		Method:             "GET",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectOK), nil

}

/*
ReadProject Read the specified project
*/
func (a *Client) ReadProject(ctx context.Context, params *ReadProjectParams) (*ReadProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readProject",
		Method:             "GET",
		PathPattern:        "/v1/projects/{id}",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadProjectReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReadProjectOK), nil

}

/*
ReplaceProject Replace the specified project
*/
func (a *Client) ReplaceProject(ctx context.Context, params *ReplaceProjectParams) (*ReplaceProjectOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceProject",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{id}",
		ProducesMediaTypes: []string{"application/json", "application/problem+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceProjectReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceProjectOK), nil

}
